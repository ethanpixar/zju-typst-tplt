#import "@local/tplt:0.2.0": *

#show: chap-num

#let ymd = "today"
#let course = "电子系统设计与实践"
#let teacher = [ ]
#let proj-name = [实验一 -- 记忆示波器系统设计]


#zju-cover(
  course: course,
  teacher: teacher,
  student-count: 2,
  students: ([XXX -- 32X010XXXX], [XXX -- 32X010XXXX]),
  ymd: ymd,
)

#show: BL
#show: RP.with(
  course: course,
  proj-name: proj-name,
)

#exp-info-chart(
  course: "电子系统设计实践",
  teacher: teacher,
  student-count: 2,
  students: (
    ([XXX], [32X010XXXX], [生物医学工程]),
    ([XXX], [32X010XXXX], [生物医学工程]),
  ),
  ymd: ymd,
  exp-cate: [电子系统设计],
  exp-name: "实验一：记忆示波器系统设计",
  where: [玉泉第7教学西裙楼 -- 301],
)

#outline()

#pagebreak()
#h0[实验分工]
#H[XXX (工作量50%)：]\
电路板焊接，硬件电路调试，软件烧录调试，数据记录，报告撰写。

#H[XXX (工作量50%)：]\
电路板焊接，硬件电路调试，软件设计调试，数据记录，软件原理部分报告撰写，流程图绘制。

= 实验要求
1. 查找、阅读相关资料，完成实验系统的焊接、调试；
2. 利用实验系统的ADC接口，对一路模拟输入信号进行采样、存储，并可经DAC输出；
3. 系统工作模式可以通过按键设置，至少包括下列几种模式：
  + *波形实时显示模式：*模拟输入信号经ADC采样后，同时进行存储(6264)和经DAC(0832中的一路)输出，另一路DAC作为信号发生器，输出一个固定频率的周期信号，周期信号的波形可以用按键选择如下四种之一：正弦波、三角波、方波、锯齿波；
  + *波形回放显示模式：*模拟输入信号经ADC采样后，经DAC输出(不进行存储)；原作为信号发生器输出的DAC，将记录在6264中的波形数据转换为模拟输出；(回放的波形在波形的频率和幅值上与实时显示时的波形应该一致)
  + *测量模式：*将ADC输入的模拟信号的当前幅值、频率(或周期)等信息显示在数码管上；显示数据更新速率不小于4Hz(每秒4次)；
  + 通过LED或数码管显示当前工作模式；
  + 可选功能：作为信号发生器的DAC输出的幅值、频率(周期)分档可调(不少于4档)；
4. 分析输入、输出波形的频率，选择合适的ADC采样频率；记录、分析输入、输出波形数据的幅值变化特点及相位变化特点、频率变化特点，讨论其成因及可能的改进方法。
5. 实验设备：\
  焊枪，实验板，万用表，稳压电源，信号发生器，示波器，口袋实验器，计算机。


#pagebreak()


= 硬件原理
== 概览
使用课程提供的原理图，并焊接实验电路的硬件部分，原理图整体如下：
#figure(image("image/BME_ME_LAB_SCH.png"), caption: "原理图")
可以大致分为以下几个部分：
+ 处理器：以STC12C5A60S2芯片为核心，内含60KB的ROM
+ 存储器：
  - 74LS373(八位锁存器)实现P0口地址线与数据线的分时复用
  - 使用6264(8KB静态随机存取存储器)作为外部RAM
+ 模拟输入：使用两级LM358，分别用作信号放大和电压跟随
+ 模拟输出：使用两个DAC0832(8位数字模拟转换器)实现两个模拟输出口CH1与CH2
+ 片选电路：74LS138(3线 -- 8线译码器/解复用器)实现片选
+ 按键与数码管显示
+ 其他：
  + 供电电路
  + 调试用的引脚
  + 烧录串行接口
== 处理器
#figure(image("image/处理器.png", width: 50%), caption: [处理器及周边电路])
本电路的核心控制芯片采用的是 STC12C5A60S2 单片机。与传统的 80C51 单片机相比，功能更多，性能更强大。
- *高精度 ADC：*内部集成，可以直接采集模拟信号，无需额外的外部 ADC 芯片，对于模拟测量简化了电路设计。
- *60KB ROM*
- *8位架构：*四个 8 位双向 I/O 端口 (P0-P3)，方便连接各种外围设备。
- *定时和计数：*2个16位定时器/计数器，可以设置为定时模式或计数模式，用于定时控制和外部事件计数。
- *中断系统：*5个中断源，实现灵活高效的中断处理。
- *复位电路：*电路中设计了由电容及开关构成的标准复位电路。
- *外部时钟源：*利用晶振电容提供外部时钟源。定时器周期为时钟周期的12倍，故12MHz晶振可为定时器提供稳定且是整数的中断周期，利于数字示波的过程中使用定时器中断来周期性检测电压。

== 模拟输入
#figure(image("image/模拟输入.png", width: 70%), caption: [模拟输入电路])
对输入的模拟信号进行处理，使其更适合后续的模数转换ADC。
=== U17B及其周边元件：放大和偏置级
U17B被配置成同相放大器，并带有直流偏置和输入耦合电容。
- *放大增益：*同相放大器的理论增益为 $1 + "R305"\/"R304" = 1 + 10"kΩ"\/ 10"kΩ" = 2$。因此，U17B级将信号放大2倍。
- *直流偏置：*R307和R306分压网络在U17B的同相输入端引入一个正向直流偏置电压，叠加到放大后的信号上，使得输出信号的直流电平抬高。
- *交流耦合：*C301隔直电容滤除了INPUT输入端信号中的直流成分。
=== U17A及其周边元件：输入缓冲级
U17A作为一个输入缓冲级，主要目的是隔离信号源ad-in和后级电路，提高输入阻抗，降低输出阻抗，保证信号的稳定传输，但不改变信号的电压幅值。
=== 处理器片内ADC
ad-in信号经过U17A后，送入处理器片内的ADC进行模数转换。ADC的输入范围为0V到5V，输出为8位数字信号，范围为0到255。ADC的采样频率为1kHz，转换时间为1ms。
==== 实现步骤
软件程序在控制STC12C5A60S2片内ADC模块并获取转换结果的过程中，主要通过以下步骤实现：
1. *ADC模块配置：*首先，软件程序需要对ADC模块进行初始化配置。这主要通过写入ADC控制寄存器ADC_CONTR完成，具体配置内容包括：
  + 使能ADC电源：通过设置ADC_CONTR寄存器的ADC_POWER位为1，激活ADC模块的供电，使其进入工作状态。
  + 选择ADC转换速度：根据实际应用对转换速度和精度的需求，配置ADC_CONTR寄存器的ADC_SPEED位，选择合适的ADC转换时钟分频系数，从而调整转换速度。
  + 选择模拟输入通道：根据需要采样的模拟信号来源，通过设置ADC_CONTR寄存器的CHS[3:0]位，指定当前要进行模数转换的模拟输入通道编号。
2. *启动ADC转换：*完成ADC模块的配置后，软件程序通过设置ADC_CONTR寄存器的ADC_START位为1来启动一次模数转换过程。硬件ADC模块在接收到启动指令后，将开始对选定的模拟输入通道进行采样和转换。
3. *等待转换完成：*启动转换后，程序通常需要等待ADC转换完成才能读取有效的结果。为了实现同步，程序会进入一个轮询循环，持续检测ADC_CONTR寄存器中的ADC_START位。由于硬件ADC模块在转换完成后会自动将ADC_START位清零，因此当程序检测到ADC_START位变为0时，即可判定当前ADC转换过程已结束。
4. *读取ADC结果：*在确认ADC转换完成后，软件程序即可从ADC结果寄存器中读取转换得到的数字量。STC12C5A60S2的ADC结果通常存储在两个寄存器中：ADC_RES寄存器用于存储转换结果的高8位，而ADC_RESL寄存器则存储转换结果的低2位。程序需要分别读取这两个寄存器的值，并将高低位数据合并，才能得到完整的10位ADC转换结果。
5. 在本实验中，为了简化并使用8位ADC结果，我们忽略ADC_RESL寄存器，仅读取ADC_RES寄存器中的值。ADC_RES寄存器存储了10位ADC结果的高8位，可直接获得8位的ADC转换结果，范围为0 -- 255。
==== 示例代码
```c
// 函数名: Read_ADC_Channel0_8bit
// 功能: 读取 ADC 通道 0 的模拟值 (仅使用 8 位结果)
// 参数: 无
// 返回值: unsigned char - 8 位 ADC 数字值 (0-255)
unsigned char Read_ADC_Channel0_8bit(void)
{
    unsigned char adc_value_8bit = 0; // 用于存储 8 位 ADC 值的变量

    // ---- 1. 配置 ADC 控制寄存器 (ADC_CONTR) ----
    ADC_CONTR = 0x80;       // 使能 ADC 电源 (ADC_POWER = 1)
    ADC_CONTR &= ~(0x30);    // 选择 ADC 转换速度 (ADC_SPEED = 00, 例如 Fosc/2)
    ADC_CONTR &= ~(0x0F);    // 选择 ADC 通道 0 (CHS[3:0] = 0000)
    // ---- 2. 启动 ADC 转换 ----
    ADC_CONTR |= 0x40;      // 启动 ADC 转换 (ADC_START = 1)
    // ---- 3. 等待 ADC 转换完成 ----
    while (ADC_CONTR & 0x40); // 循环等待 ADC_START 位清零
    // ---- 4. 读取 ADC 结果 (仅读取 ADC_RES) ----
    adc_value_8bit = ADC_RES;  // 直接读取 ADC_RES，得到 8 位结果
    // ---- 5. 返回 ADC 值 ----
    return adc_value_8bit;     // 返回读取到的 8 位 ADC 数字值
}
```

== 存储器
#figure(image("image/存储器.png", width: 70%), caption: [存储器原理图])
存储器部分主要由74LS373和6264两个芯片构成。
=== 访问存储器过程
+ 在处理器访问存储器6264最开始，处理器将存储器地址的低8位(A0-A7)放在端口P0上，同时将高位地址(A8-A12，以及更高位用于片选的地址A13-A15)放在端口P2上。
+ *ALE信号(地址锁存使能)：*处理器在引脚30产生一个ALE信号。该ALE信号连接到U2 -- 74LS373的锁存使能(LE，引脚19)上。
+ *锁存：*处理器在地址稳定后，将ALE信号拉高，74LS373变为透明，使输入D0-D7上的数据直接传到输出Q0-Q7上。然后，处理器迅速将ALE信号拉低，在ALE下降沿，74LS373会锁存当时输入端的数据，从而为U5 -- 6264提供稳定的地址信号。
+ *读写信号：*处理器在16，17引脚产生RD/WR信号，连接到U5 -- 6264的OE/WE引脚上。
+ *数据传输：*根据读写操作的不同，处理器在引脚P0上通过D0-D7接收来自6264的数据信号(读操作)或者在引脚P0上产生数据信号发送给6264(写操作)，连接到U5 -- 6264的D0-D7引脚上。
这样就在P0口复用的情况下完成了数据的读写过程。
=== 高位地址A8 -- A12
A8-A12的主要作用就是与A0-A7共同构成完整的13位地址，从而能够寻址6264内部的每一个存储单元。6264是一个8KB的SRAM芯片($8192"bits" = 2^13$)，需要13位地址线来寻址。低位地址A0-A7来自74LS373锁存，高位地址A8-A12则来自P2端口。
=== 调用外部存储的软件写法
以上的步骤不需要写在软件里一步步执行。8051单片机的硬件已经设计了专门的状态机和控制单元来自动完成这些操作。当需要在软件中访问外部存储器6264时，只需要使用特定的指令或语法，8051的硬件就会自动处理地址锁存、信号切换和数据传输等底层细节。

在汇编语言中，使用 MOVX 指令来访问外部数据存储器。例如：
```asm
MOV DPTR, #0000H  ; 将外部存储器地址 0x0000 加载到 DPTR 寄存器
MOV A, #55H       ; 将要写入的数据 0x55 加载到累加器 A
MOVX @DPTR, A     ; 执行写操作：硬件自动完成 ALE 脉冲、WR 信号、数据传输等
MOVX A, @DPTR     ; 执行读操作：硬件自动完成 ALE 脉冲、RD 信号、数据传输等
```
在C语言，如Keil C51中，需使用`xdata`关键字声明变量或指针，并像访问普通变量一样操作它们。编译器会自动生成访问外部存储器的代码(通常也就是MOVX指令)。
```c
// 声明一个 unsigned char 类型的变量 'external_data'，存储在外部 RAM 的地址 0x0000
unsigned char xdata external_data _at_ 0x0000;

void main() {
  external_data = 0xAA;  // 写入数据：硬件自动完成 ALE 脉冲、WR 信号、数据传输等
  unsigned char read_value = external_data; // 读取数据：硬件自动完成ALE、RD、数据传输等
}
```
=== A13 -- A15地址线和片选电路
另外P2端口更高位的A13-A15地址线连接到74LS138用于实现片选，使处理器能通过A13-A15的更高位地址直接从存储器和两个DAC芯片中选择一个。原理详见片选电路部分。

== 片选电路
#figure(image("image/片选电路.png", width: 70%), caption: [片选电路])
片选电路由74LS138构成，主要功能是将8051单片机的地址线A13-A15译码为8条片选信号，用于编码外部地址控制RAM6264和两片DAC0832芯片的读写操作。

=== 74LS138译码器原理
74LS138是一款高速3线-8线译码器。其基本功能是根据3位二进制地址输入(A, B, C)将8个输出端(Y0-Y7)中的一个置为低电平(有效输出)，其余输出端保持高电平。译码逻辑真值表如下所示：
#figure(
  table(
    columns: 3,
    table.header([使能端(E1, E2, E3)], [输入端(CBA)], [输出端(Y7-Y0)]),

    [L, L, H], [000], [11111110(Y0低电平)],
    [L, L, H], [001], [11111101(Y1低电平)],
    [L, L, H], [010], [11111011(Y2低电平)],
    [...], [...], [...],
    [L, L, H], [111], [01111111(Y7低电平)],
    [其他使能端组合], [X], [11111111(全部高电平)],
    table.hline(),
  ),
  caption: [74LS138译码器真值表],
)
其中，使能端E1和E2为低电平有效，E3为高电平有效。当使能端满足条件(E1=L, E2=L, E3=H)时，译码器正常工作；否则，所有输出端Y0-Y7均为高电平。

=== 电路连接与片选逻辑
在本实验电路中，74LS138 的使能端 E1 和 E2 接地，E3 接电源，使其始终使能。74LS138 的地址输入端 ABC 直接连接至微控制器的 P25-P27 引脚，对应地址线 A13-A15。因此，74LS138 的译码输入由地址线 A13-A15 决定。

74LS138 的输出端 Y0-Y2 分别连接至以下芯片的片选端：
- Y0 → RAM6264(U5) 的 CS0：当地址线 A13A14A15=000 时选中 RAM6264。
- Y1 → DAC0832(U13) 的 CS：当地址线 A13A14A15=001 时选中 DAC1。
- Y2 → DAC0832(U14) 的 CS：当地址线 A13A14A15=010 时选中 DAC2。
- Y3-Y7: 未连接，对应未使用地址空间。

=== 地址分配与内存映射
基于上述片选逻辑，RAM 和 DAC 芯片的地址分配如下：
- RAM6264(U5): 当地址线 A13A14A15=000 时被选中，地址范围 0x0000 - 0x1FFF (8KB)
- DAC0832(U13): 当地址线 A13A14A15=001 时被选中，地址范围 0x2000 - 0x3FFF (8KB)
- DAC0832(U14): 当地址线 A13A14A15=010 时被选中，地址范围 0x4000 - 0x5FFF (8KB)

=== MOVX指令与DAC操作
8051单片机使用MOVX指令访问外部数据存储器空间。RAM6264和DAC0832均被映射至外部数据存储器空间，因此可通过MOVX指令进行读写操作。
== 模拟输出
#figure(image("image/模拟输出.png"), caption: [模拟输出DAC电路])
模拟输出电路包含两个完全相同的模拟输出通道，每个通道都利用DAC0832芯片将数字信号转换为电流信号，然后通过两级运算放大器(LM358)进行电流-电压转换、反相放大、电压范围调整和滤波等处理，最终在OUTPUT连接器上输出0V-5V范围内的模拟电压信号。双通道设计允许同时输出两个独立的模拟信号。整个电路的设计目标是提供精度较高、驱动能力较强、噪声较低的模拟电压输出，适用于各种需要数字控制模拟输出的应用场景。

=== DAC0832 -- 数字模拟转换核心：
+ *数字输入：*8位数字信号D0-D7连接到DAC0832的DI0-DI7引脚(引脚7,6,5,4,16,15,14,13)，其中DI0是最低位(lsbDI0)，DI7是最高位(msbDI7)。这些数字输入信号来自处理器的P0口。
+ *控制信号：*
  + *CS (片选,引脚17)：*CS1信号(对U13)和CS2信号(对U14)分别控制两个DAC0832芯片的片选。当CS信号为低电平时，对应的DAC0832芯片被选中，可以进行数据写入。
  + *Xfer (传输控制,引脚1)：*Xfer信号连接到两个DAC0832芯片的Xfer引脚，与写使能信号配合使用，控制何时将输入锁存器的数据传输到DAC寄存器并开始转换。
  + *ILE (输入锁存使能,引脚19)：*ILE信号连接到两个DAC0832芯片的ILE引脚。当ILE为低电平时，允许数据写入输入锁存器。
  + *WR1和WR2 (写使能,引脚18,2)：*WR信号同时连接到WR1和WR2引脚。当WR信号为低电平，且芯片被选中(CS为低电平)且ILE使能时，数字数据会被写入DAC0832的输入锁存器或DAC寄存器。
  + *参考电压Vref (引脚8)：*Vref引脚连接到VCC电源，决定了DAC0832的满量程输出电压范围，即0V到Vref(5V)。
  + *反馈电阻Rfb (引脚9)：*Rfb引脚连接到U15A运算放大器的输出端(引脚1)。DAC0832内部需要一个反馈电阻来配合外部运放实现电流-电压转换。
+ *电流输出Iout1和Iout2 (引脚11,12)：*
  - *Iout1 (引脚11)：*是DAC0832的主输出电流。输出电流的大小与输入的数字值成正比。
  - *Iout2 (引脚12)：*是互补输出电流。Iout2的电流与Iout1的电流方向相反，并且Iout1+Iout2的值应该是一个恒定值(理想情况下)。
  在本电路中，Iout2(引脚12)被接地，而Iout1(引脚11)连接到U15A运算放大器的反相输入端(引脚2)。
=== 第一级运算放大器U15/16A (电流-电压转换)：
- *运放型号：*U15A是LM358运算放大器的一部分。
- *配置：*U15A被配置成反相放大器，同时实现电流-电压转换。

=== 第二级运算放大器U15/16B (反相放大和电压范围调整)：
- *运放型号：*U15B也是LM358运算放大器的一部分。
- *配置：*U15B被配置成反相放大器。

*恢复同相：*由于经过了两级反相放大器(U15A和U15B)，整体的信号极性会恢复为同相。也就是说，最终的输出电压与DAC0832的数字输入值呈同相关系。

*电压范围调整：*通过调整R403和R404的比值，调整最终输出电压的范围为$-5~+5"V"$之间。

=== 输出级滤波和连接器
- *电容C401(0.1µF)和C402(0.1µF)：*这两个电容C401和C402与电阻R404和R408构成低通滤波器，用于滤除输出信号中的高频噪声，使输出信号更平滑。
- *OUTPUT连接器(CON4)：*OUTPUT连接器(CON4)提供了最终的模拟电压输出接口，可以连接到外部设备或电路。引脚1和3是信号输出端，引脚2和4接地。

=== 调用方法
DAC电路芯片的连接与RAM相同，利用了74LS138完成地址线编码实现片选。利用MOVX可以直接完成DA操作。

DAC0832数据手册规定了最小写周期时间tWC和写脉冲宽度tWP。在高系统时钟频率下8051的MOVX指令产生的WR脉冲宽度可能在某些情况下无法满足DAC0832的时序要求。为确保DAC0832数据写入的可靠性，可能需要在MOVX指令前后插入NOP指令或短延时程序，人为延长WR信号的低电平持续时间，以满足DAC0832的最小写脉冲宽度要求。

== 按键与数码管显示
#figure(image("image/键盘显示.png"), caption: [按键与数码管显示])
采用串行+扫描的方式，利用有限的单片机引脚实现数码管显示和键盘输入功能。核心器件为两片级联的74HC595串行转并行移位寄存器，配合共阴极数码管和按键，实现显示和按键输入。

=== 显示原理(扫描显示)
为了驱动多个数码管，并节省单片机I/O口，本实验采用动态扫描显示技术。其原理如下：
+ *串行数据输入与并行输出：*单片机通过SDAT(串行数据)和SCLK(串行时钟)引脚，将显示数据串行发送至74HC595(U11,U12)芯片。在SCLK的控制下，数据逐位移入移位寄存器。当完成16位数据(两片74HC595级联)的输入后，RCLK(寄存器时钟)引脚产生上升沿，将移位寄存器中的串行数据一次性并行输出到O0-O7引脚。
+ *数码管段码控制(低8位)：*74HC595芯片U12的O0-O7引脚，即并行输出的低8位，连接至共阴极数码管(L1-L4)的段码输入端(A-H)。单片机通过控制这8位输出不同的段码，来控制数码管显示不同的数字或字符。
+ *数码管位选控制(高8位-实际使用低5位)：*74HC595芯片U11的O0-O4引脚，即并行输出的高8位中的低5位，分别连接至NPN型晶体管(T201-T205)的基极。这些晶体管作为开关，控制共阴极数码管(L1-L4)的COM1和LED指示灯(LD1-LD4)的共阴极。当74HC595对应引脚输出高电平时，晶体管导通，将对应的数码管或LED的共阴极拉低，使其可以被点亮。
+ *扫描显示过程：*单片机通过快速轮流控制74HC595的位选输出(U11的O0-O4)，每次只使能一个数码管或LED的显示位，并同时通过段码输出(U12的O0-O7)控制该位显示的字符。由于扫描频率足够高，利用人眼的视觉暂留效应，即可实现多位数码管的同时显示效果。

=== 键盘原理(扫描检测)

本实验的键盘输入也利用了扫描的方式，并与数码管的扫描显示复用部分扫描线，实现键盘的检测。

- *键盘矩阵：*按键S1-S8以矩阵形式排列。按键的一端连接到数码管的COM2引脚(实际上与晶体管T201-T204和T205的集电极相连，受74HC595U11的O0-O4控制)，作为键盘矩阵的行线。按键的另一端分别连接到KEY1和KEY2引脚，作为键盘矩阵的列线。
- *扫描检测原理：*在进行数码管扫描显示的同时，也完成了键盘的扫描检测。当74HC595U11的某个位选引脚(O0-O4)输出高电平，使能对应行的数码管显示时，也同时选中了键盘矩阵的对应行。此时，单片机检测KEY1和KEY2引脚的电平状态。
- *按键识别：*KEY1和KEY2引脚通过上拉电阻(R209,R210)连接到VCC。当没有按键按下时，KEY1和KEY2保持高电平。当某一行的某个按键被按下时，该按键会将对应的列线(KEY1或KEY2)通过导通的晶体管(T201-T205)拉低。单片机检测到KEY1或KEY2引脚的低电平，即可判断有按键被按下。结合当前扫描的行线，即可确定具体是哪个按键被按下。
#pagebreak()
== 其他
=== 供电电路
#figure(image("image/供电.png", width: 70%), caption: [供电电路])
电源退耦电路通过在电源和地之间并联多个不同容值的电容，实现了以下目标：
+ 降低电源噪声，尤其是高频噪声。
+ 稳定电源电压，减少电压波动。
+ 提高电路的抗干扰能力和工作可靠性。
=== 调试用引脚
#figure(image("image/测试.png", width: 25%), caption: [调试用引脚])
这部分引脚主要用于调试和测试，方便连接示波器或其他测试设备。
=== 烧录器接口
#figure(image("image/接口.png", width: 70%), caption: [烧录器接口])
烧录使用MAX232芯片，通过串口与电脑连接。

#pagebreak()


= 软件原理
== 概览


== 主程序

== LED 数码管、按键扫描

== 模式选择模块

== 功能模式总结

#pagebreak()
= 成品功能演示与问题分析
#s2 功能演示部分使用了口袋实验室设备和实验地点的示波器和信号发生器等。为使内容简洁，以下部分中仅展示并分析示波器和信号发生器的测量数据，口袋实验室设备的测量数据见附录部分。

= 总结与心得



#pagebreak()
= 附录：口袋示波器测量数据
